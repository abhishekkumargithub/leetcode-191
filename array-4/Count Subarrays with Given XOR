//Approach : 1. BruteForce approach:
// Intuition: The brute force solution is to generate all possible subarrays. For each generated subarray we get the respective XOR and then check if this XOR is equal to B. If it is then we increment the count. 
// In the end, we will get the count of all possible subarrays that have XOR equal to B.
// Approach:
// Generate subarrays: To generate all possible subarrays, we use the same old technique of nested loops. For each value of the outer loop (i loop), the inner loop(j loop) runs from i till the last element. Each iteration of the inner loop gives a new subarray. 
// Maintain XOR: Since each iteration of the inner loop gives a new subarray, we maintain a variable X, in which we keep the XOR of the current subarray. 
// Check and Count: Before moving to the next iteration of the inner loop (that is before going to the next subarray), we check if the current XOR is equal to B, if it is then we increment the counter (counter also has to be maintained).


#include <bits/stdc++.h>  
int subarraysXor(vector<int> &A, int B)
{
    //    Write your code here.
    // long long c=0;
    // for(int i=0;i<A.size();i++){
    //     int current_xor = 0;
    //     for(int j=i;j<A.size();j++){
    //         current_xor^=A[j];
    //         if(current_xor==B) c++;
    //     }
    // }
    // return c;
    unordered_map<int,int>visited;
    int cpx = 0;
    long long c=0;
    for(int i=0;i<A.size();i++){
        cpx^=A[i];
        if(cpx==B) c++;
        int h = cpx^B;
        if(visited.find(h)!=visited.end()){
            c=c+visited[h];
        }
        visited[cpx]++;
    }
    return c;

}

//Optimized approach:
// We need to traverse the array while we maintain variables for current_perfix_xor, counter, and also a map to keep track of visited xors. 
// This map will maintain the frequency count of all previous visited current_prefix_xor values. 
// If for any index current_prefix_xor is equal to B, we increment the counter.
// If for any index we find that Z is present in the visited map, we increment the counter by visited[Z] 
// (Z=current_prefi_xor^B). At every index, we insert the current_prefix_xor into the visited map with its frequency.
Approach: Sort the array, and then fix two pointers, so the remaining sum will be (target â€“ (nums[i] + nums[j])). Now we can fix two-pointers, one front, and another back,
and easily use a two-pointer to find the remaining two numbers of the quad

class Solution{
    public:
        vector<vector<int>> fourSum(vector<int>& nums,int target)
        {
            sort(nums.begin(),nums.end());
            set<vector<int>> st;
            int n=nums.size();
            for(int i=0;i<n;i++)
            {
                for(int j=i+1;j<n;j++)
                {
                    int start=j+1,end=n-1;
                    while(start<end)
                    {
                        long long crSum=(long long)nums[i]+nums[j]+nums[start]+nums[end];
                        if(crSum==target)
                        {
                            st.insert({nums[i],nums[j],nums[start],nums[end]});
                            end--;
                        }
                        else if(crSum>target) end--;
                        else start++;
                    }
                }
            }
            vector<vector<int>> ans(st.begin(),st.end());
            return ans;
        }
}
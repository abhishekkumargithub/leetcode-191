/*
Make sure to sort the array first, because only then it makes sense to use binary search.

For the BS approach, we set low = 1 because the minimum distance is 1 and high =array[n-1] – array[0] . 
because that’s the maximum possible distance between two stalls. 

Let’s calculate our mid-value after this. 
        mid = low + (high-low)/2
Then we check if the minimum distance(mid-value) is possible by the same method defined in brute force, and if it is not possible, this means we can set our upper bound as high-1, and if it is possible, 
we store it in an answer variable and set our lower bound as mid+1. 
We keep on doing this until high and low pointers are equal. 

Dry run of this example:
     low = 1, high = 9-1 = 8 
     mid  = 1 + (8-1)/2 = 4

Let’s check for 4, but it doesn’t fit( check Fig 4), so now we can reduce our search space by setting the upper bound as 4-1=3 because all numbers greater than equal to 4 are not valid. Now we check for mid = 1 + (3-1)/2 = 2Which is 2, 
checking if it’s a valid solution and cows can fit in, we find that it is a valid solution, 
so we store it as a possible answer and because we need a maximum-minimum distance, 
we set the lower bound as 2+1 =3. We find that 3 is also a possible solution, 
so we store it in our ans because it’s greater than our previous answer.
Our low and high variables are equal now, so we can stop our binary search here.
*/

bool isPossible(vector<int> &stalls, int k, int mid) 
{
    int cowcount=1;
    int curpos=stalls[0];
    for (int i = 0; i < stalls.size(); i++) 
    {
      if(stalls[i] - curpos >= mid) 
      {
          cowcount++;
          if (cowcount == k) 
          {
              return true;
          }
          curpos=stalls[i];
      }
    }
    return false;
}

int aggressiveCows(vector<int> &stalls, int k)
{
    //    Write your code here.
    sort(stalls.begin(),stalls.end());
    int s=0;
    int maxi=-1;
    for (int i = 0; i < stalls.size(); i++) 
    {
        maxi=max(maxi,stalls[i]);
    }
    int e=maxi;
    int ans=-1;
    while (s <= e) 
    {
        int mid=s+(e-s)/2;
        if (isPossible(stalls, k, mid)) 
        {
            ans=mid;
            s=mid+1;
        } 
        else 
        {
            e=mid-1;
        }
    }
    return ans;
}
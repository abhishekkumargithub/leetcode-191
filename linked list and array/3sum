 //Approach:
// We could make use of the fact that we just need to return the triplets and thus could possibly sort the array. 
// This would help us use a modified two-pointer approach to this problem.

// Eg) Input :  [-1,0,1,2,-1,-4]

// After sorting, our array is : [-4,-1,-1,0,1,2]

// Notice, that we are fixing the i pointer and then applying the traditional 2 pointer approach to check whether 
// the sum of three numbers equals zero. If the sum is less than zero, it indicates our sum is probably too less 
// and we need to increment our j pointer to get a larger sum. On the other hand, if our sum is more than zero, 
// it indicates our sum is probably too large and we need to decrement the k pointer to reduce the sum and bring it
// closer to zero.

vector<vector<int>> threeSum(vector<int>& num) 
    {
        vector<vector<int>> res; 
        sort(num.begin(), num.end()); 
        
        // moves for a
        for (int i = 0; i < (int)(num.size())-2; i++) {
            
            if (i == 0 || (i > 0 && num[i] != num[i-1])) 
            {    
                int lo = i+1, hi = (int)(num.size())-1, sum = 0 - num[i];   
                while (lo < hi) 
                {
                    if (num[lo] + num[hi] == sum) 
                    {        
                        vector<int> temp; 
                        temp.push_back(num[i]); 
                        temp.push_back(num[lo]); 
                        temp.push_back(num[hi]); 
                        res.push_back(temp);
                        
                        while (lo < hi && num[lo] == num[lo+1]) 
                            lo++;
                        while (lo < hi && num[hi] == num[hi-1]) 
                            hi--;
                        
                        lo++; 
                        hi--;
                    } 
                    else if (num[lo] + num[hi] < sum) 
                        lo++;
                    else 
                        hi--;
                }
            }
        }
        return res;
    }
//recursive approach:

class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) 
    {
        if(l1 == NULL)
        {
			return l2;
		}
		if(l2 == NULL)
        {
			return l1;
		} 
		if(l1 -> val <= l2 -> val)
        {
			l1 -> next = mergeTwoLists(l1->next, l2);
			return l1;
		}
		// we will call recursive l1 whole list and l2 -> next
		else
        {
			l2 -> next = mergeTwoLists(l1, l2 -> next);
			return l2;            
		}
    }
};

//MERGE SORT
Node<int>* solve(Node<int>* first, Node<int>* second)

{

    if(first->next == NULL){

        first->next = second;

        return first;

    }

 

    Node<int>* curr1 = first;

    Node<int>* next1 = curr1->next;

    Node<int>* curr2 = second;

    Node<int>* next2 = curr2->next;

 

    while(next1 != NULL && curr2 != NULL){

        if((curr2->data >= curr1->data) && (curr2->data <= next1->data)){

            curr1->next = curr2;

            next2 = curr2->next;

            curr2->next = next1;

 

            curr1 = curr2;

            curr2 = next2;

        }

        else{

            curr1 = next1;

            next1 = next1->next;

 

            if(next1 == NULL){

                curr1->next = curr2;

                return first;

            }

        }

    }

    return first;

}

Node<int>* sortTwoLists(Node<int>* first, Node<int>* second)

{

    // Write your code here.

    if(first == NULL)

        return second;

    

    if(second == NULL)

        return first;

 

    if(first->data <= second->data){

        solve(first,second);

    }

    else{

        solve(second,first);

    }

}

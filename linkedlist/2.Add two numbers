Approach:
    Create a dummy node which is the head of new linked list.
    Create a node temp, initialise it with dummy.
    Initialize carry to 0.
    Loop through lists l1 and l2 until you reach both ends, and until carry is present.
    Set sum=l1.val+ l2.val + carry.
    Update carry=sum/10.
    Create a new node with the digit value of (sum%10) and set it to temp node’s next, then advance temp node to next.
    Advance both l1 and l2.
    Return dummy’s next node.

class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) 
    {
          ListNode* node= new ListNode(0);
          ListNode* curr=node;
          int carry=0;

          while(l1!=NULL || l2!=NULL || carry==1)
          {
                int sum=0;
                if(l1!=NULL)
                {
                    sum+=l1->val;
                    l1=l1->next;
                }
                if(l2!=NULL)
                {
                    sum+=l2->val;
                    l2=l2->next;
                }
                sum+=carry;
                carry=sum/10;
                ListNode* n1=new ListNode(sum%10);
                curr->next=n1;
                curr=curr->next;
          }
          return node->next;
    }
};
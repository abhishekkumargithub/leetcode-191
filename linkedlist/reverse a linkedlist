//Using recursion we can do it in this way:
class Solution {
public:

    ListNode* reverseList(ListNode* &head) {

        if (head == NULL||head->next==NULL)
            return head;

        ListNode* nnode = reverseList(head->next);
        head->next->next = head;
        head->next = NULL;
        return nnode;
    }
};

class Solution {
public:
    ListNode* reverseList(ListNode* head) 
    {
        ListNode *tail = NULL; 
        ListNode *cur = head; 
        ListNode *pre = head;
        while(cur)
        {
            cur = cur->next; 
            pre->next = tail;
            tail = pre;
            pre = cur; 
        }
        return tail;  
    }
};

ListNode* reverseList(ListNode* head)
{
    ListNode *newHead=NULL;
    while(head!=NULL)
    {
        ListNode *next=head->next;
        head->next=newHead;
        newHead=head;
        head=next;
    }
    return newHead;
}
//Algorithm:
//first we need to make pair of starting and ending point  then sort the pair on the basis of endpoint
//now declare a variable result to stor value 1
//now iterate through pair and check if 
//If the start time of a meeting is  strictly greater than limit we can perform the meeting. Update the answer.Our new limit is the ending time of the current meeting  since it was last performed.Also update limit.  
// If the start time is less than or equal to limit  ,skip and move ahead. 

class
{
    public:
    //Function to find the maximum number of meetings that can be performed in a meeting room.
    int maxMeetings(int start[], int end[], int n)
    {
        // Your code here
        vector<pair<int,int>> v;
        for(int i=0;i<n;i++)
        {
            v.push_back(make_pair(end[i],start[i]));
        }
        sort(v.begin(),v.end());
        int res=1;
        int prev=v[0].first;
        for(int curr=1;curr<n;curr++)
        {
            if(v[curr].second>prev)
            {
                res++;
                prev=v[curr].first;
            }
        }
        return res;
    }
};
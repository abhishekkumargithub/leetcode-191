//Approach which comes to mind after seeing this qstion is recursion
//In this approach we will strt from index 0 and keep on recursively calling the function to find the desired sum
//if index is equal to array size then it will push ds inside ans
//if arr[ind] is less then target then we will push array value inside ds and again recursively calling helper function

class Solution {
public:
    void findCombination(int ind, int target, vector<int>& arr,vector<vector<int>>& ans, vector<int>& ds)    
    {
      if (ind == arr.size()) 
      {
        if (target == 0) {
          ans.push_back(ds);
        }
        return;
      }
      // pick up the element 
      if (arr[ind] <= target) 
      {
        ds.push_back(arr[ind]);
        findCombination(ind, target - arr[ind], arr, ans, ds);
        ds.pop_back();
      }

      findCombination(ind + 1, target, arr, ans, ds);

    } 

    vector<vector<int>> combinationSum(vector<int>& candidates, int target) 
    {
      vector < vector < int >> ans;
      vector < int > ds;
      findCombination(0, target, candidates, ans, ds);
      return ans;
    }
};